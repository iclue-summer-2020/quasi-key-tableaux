{"version":3,"sources":["components/QKTView.tsx","utils/Message.tsx","components/QKTMainPage.tsx","components/App.tsx","scripts/serviceWorker.ts","index.tsx"],"names":["Stage","Message","Toaster","create","position","Position","BOTTOM","usePortal","canEscapeKeyClear","process","REACT_APP_QKT_HOST","REACT_APP_QKT_PORT","ENDPOINT","TILE_COLOR","blue","QKTView","props","componentDidMount","componentWillUnmount","doneSolving","setState","stage","Finished","buildGrid","grid","classes","Grid","container","className","root","item","xs","map","row","r","key","spacing","value","c","Paper","paper","style","backgroundColor","Typography","validateAlphaText","text","notValid","valid","alpha","trim","arr","split","every","x","Number","isInteger","filter","parseInt","length","some","sendRequest","a","options","url","headers","origin","window","location","useQuerystring","qs","json","response","rp","show","timeout","message","icon","intent","Intent","DANGER","SUCCESS","numSolutions","status","sameWtSamples","Ts","onSubmit","alphaText","state","Solving","sampleIdx","onSliderChange","onAlphaChange","event","target","validAlphaText","render","submitButton","content","minimal","PRIMARY","disabled","type","onClick","e","preventDefault","helperText","label","labelFor","labelInfo","placeholder","onChange","leftIcon","rightElement","slice","reverse","min","max","color","Colors","RED2","GREEN2","stripes","React","Component","withStyles","theme","createStyles","flexGrow","height","width","justifyContent","display","flexDirection","dotenv","config","QKTMainPage","App","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d10d7b9d.chunk.js","sourcesContent":["import React from 'react';\nimport rp from 'request-promise';\nimport {\n  ProgressBar, InputGroup, Button, Intent, FormGroup, Tooltip, H5, Slider, Colors,\n} from '@blueprintjs/core';\nimport { withStyles, createStyles } from '@material-ui/styles';\nimport { Theme, WithStyles, Paper, Grid, Typography } from '@material-ui/core';\nimport blue from '@material-ui/core/colors/blue';\n\nimport Message, { TIMEOUT } from 'utils/Message';\nimport 'styles/QKTView.css';\n\n\nconst { REACT_APP_QKT_HOST = 'localhost', REACT_APP_QKT_PORT = 5000 } = process.env;\n\nconst inDev = !process.env.NODE_ENV || process.env.NODE_ENV === 'development';\nconst CORS = `https://cors-anywhere.herokuapp.com/`;\nconst ENDPOINT = `${inDev ? '' : CORS}http://${REACT_APP_QKT_HOST}:${REACT_APP_QKT_PORT}`;\nconst TILE_COLOR = blue[200];\nconst NUM_SAMPLES = 20;\n\nconst styles = (theme: Theme) => createStyles({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    height: 50,\n    width: 50,\n    justifyContent: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n});\n\nenum Stage {\n  Solving,\n  Finished,\n}\n\ninterface AlphaValidation {\n  valid: boolean;\n  alpha: number[] | null;\n}\n\ninterface Props extends WithStyles<typeof styles> { }\n\ninterface State {\n  stage: Stage;\n  alpha: number[] | null;\n  Ts: number[][][] | null;\n  sampleIdx: number;\n  status: string | null;\n  sameWtSamples: number[][][] | null;\n  numSolutions: number | null;\n  validAlphaText: boolean;\n  alphaText: string;\n}\n\n/**\n * There a 3 stages:\n *   1. Inform the user what they need to do.\n *   2. Retrieval and display of QKTs.\n *   3. Show info after done.\n */\n\nclass QKTView extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      stage: Stage.Finished,\n      alpha: null,\n      status: null,\n      sameWtSamples: null,\n      numSolutions: null,\n      Ts: null,\n      sampleIdx: 0,\n      validAlphaText: false,\n      alphaText: '',\n    };\n  }\n\n  componentDidMount = () => { };\n\n  componentWillUnmount = () => { };\n\n  doneSolving = () => {\n    this.setState({\n      stage: Stage.Finished,\n    });\n  };\n\n  buildGrid = (grid: number[][]) => {\n    const { classes } = this.props;\n\n    return (\n      <Grid container className={classes.root}>\n        <Grid item xs='auto'>{grid.map((row, r) => (\n          <Grid container className={classes.root} key={r} spacing={0}>{row.map((value, c) => (\n            <Grid item key={`${r}.${c}`}>\n              <Paper\n                className={classes.paper}\n                style={{ backgroundColor: TILE_COLOR }}>\n                  <Typography>\n                    {value}\n                  </Typography>\n                </Paper>\n            </Grid>\n          ))}</Grid>\n        ))}</Grid>\n      </Grid>\n    );\n  };\n\n\n  /**\n   * The alpha text is valid if it:\n   *   - is non-empty,\n   *   - is a list of positive integers delimited by commas.\n   */\n  validateAlphaText = (text: string): AlphaValidation => {\n    const notValid = { valid: false, alpha: null };\n\n    if (text.trim() === '') return notValid;\n\n    const arr = text.split(/[ \\t,]+/);\n    if (!arr.every(x => Number.isInteger(+x))) return notValid;\n\n    const alpha = arr\n      .filter(x => x !== '')\n      .map(x => Number.parseInt(x));\n    if (alpha.length === 0) return notValid;\n    if (alpha.some(x => x < 0)) return notValid;\n\n    return { valid: true, alpha };\n  };\n\n  sendRequest = async (alpha: number[]) => {\n    const options: rp.OptionsWithUrl = {\n      url: `${ENDPOINT}/solve`,\n      headers: {\n        origin: window.location.origin,\n      },\n      useQuerystring: true,\n      qs: {\n        'alpha[]': alpha,\n        'num_samples': NUM_SAMPLES,\n      },\n      json: true,\n    };\n\n    let response = null;\n    try {\n      response = await rp(options);\n    } catch (e) {\n      Message.show({\n        timeout: TIMEOUT,\n        message: `Unable to solve: ${e}`,\n        icon: 'warning-sign',\n        intent: Intent.DANGER,\n      });\n      return this.setState({ stage: Stage.Finished });\n    }\n\n    Message.show({\n      timeout: TIMEOUT,\n      message: 'Successfully solved',\n      icon: 'tick',\n      intent: Intent.SUCCESS,\n    });\n    return this.setState({\n      stage: Stage.Finished,\n      numSolutions: response['num_solutions'],\n      status: response['status'],\n      sameWtSamples: response['same_weight_samples'],\n      Ts: response['sample_solutions'],\n      alpha,\n    });\n  };\n\n  /**\n   * Called when the submit button is pressed.\n   */\n  onSubmit = () => {\n    const { alphaText } = this.state;\n    const { valid, alpha } = this.validateAlphaText(alphaText);\n    if (!valid) return;\n\n    this.setState({\n      stage: Stage.Solving,\n      alpha: null,\n      status: null,\n      sameWtSamples: null,\n      numSolutions: null,\n      Ts: null,\n      sampleIdx: 0,\n    }, () => this.sendRequest(alpha!));\n  };\n\n  onSliderChange = (value: number) => {\n    this.setState({\n      sampleIdx: value-1,\n    });\n  };\n\n  /**\n   * Called when the composition text is altered.\n   */\n  onAlphaChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    const { valid } = this.validateAlphaText(value);\n\n    this.setState({\n      validAlphaText: valid,\n      alphaText: value,\n    });\n  };\n\n  render = () => {\n    const {\n      Ts,\n      alpha,\n      numSolutions,\n      sameWtSamples,\n      sampleIdx,\n      stage,\n      status,\n      validAlphaText,\n    } = this.state;\n\n    const submitButton = (\n      <Tooltip content='Find quasi-key tableaux'>\n        <Button\n          minimal\n          icon='arrow-right'\n          intent={Intent.PRIMARY}\n          disabled={!validAlphaText}\n          type='submit'\n          onClick={this.onSubmit}\n        />\n      </Tooltip>\n    );\n\n    return (\n      <div>\n        <form onSubmit={e => e.preventDefault()}>\n          <FormGroup\n            helperText=''\n            label='composition'\n            labelFor='text-input'\n            labelInfo='(weak)'\n          >\n            <InputGroup\n              placeholder={'\\u03b1'}\n              onChange={this.onAlphaChange}\n              intent={validAlphaText ? Intent.SUCCESS : Intent.DANGER}\n              leftIcon='dot'\n              rightElement={submitButton}\n            />\n          </FormGroup>\n        </form>\n        {Ts && this.buildGrid(Ts[sampleIdx].slice().reverse())}\n        {Ts &&\n          <div>\n            Samples\n            <Slider\n              value={sampleIdx+1}\n              disabled={stage === Stage.Solving}\n              min={1}\n              max={Ts.length}\n              onChange={this.onSliderChange}\n              className='qkt-slider'\n            />\n          </div>\n        }\n        {alpha &&\n          <div>\n            <H5>Status: {status}</H5>\n            <H5>Number of solutions: {numSolutions}</H5>\n            {sameWtSamples ?\n                <H5 style={{ color: Colors.RED2 }}>Found tableaux with same weight</H5>\n              : <H5 style={{ color: Colors.GREEN2 }}>Multiplicity free!</H5>\n            }\n          </div>\n        }\n        {stage === Stage.Solving &&\n          <ProgressBar\n            className='sb-footer'\n            value={1}\n            stripes\n          />\n        }\n      </div>\n    );\n  };\n}\n\nexport default withStyles(styles)(QKTView);","import { Position, Toaster } from '@blueprintjs/core';\n\n\nexport const TIMEOUT = 2000;\n\nconst Message = Toaster.create({\n  position: Position.BOTTOM,\n  usePortal: true,\n  canEscapeKeyClear: true,\n});\n\nexport default Message;","import React from 'react';\nimport dotenv from 'dotenv';\n\nimport QKTView from 'components/QKTView';\n\n\ndotenv.config();\n\nconst QKTMainPage = () => (\n  <QKTView />\n);\n\nexport default QKTMainPage;","import React from 'react';\n\nimport '@blueprintjs/core/lib/css/blueprint.css';\n\nimport QKTMainPage from 'components/QKTMainPage';\n\nimport 'styles/App.css';\n\n\nconst App = () => (\n  <div\n    className={`App`}\n    style={{ width: '100%', height: '100%' }}\n  >\n    <QKTMainPage />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport dotenv from 'dotenv';\n\nimport App from 'components/App';\nimport * as serviceWorker from 'scripts/serviceWorker';\n\nimport 'styles/index.css';\n\n\ndotenv.config();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}