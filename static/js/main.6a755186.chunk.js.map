{"version":3,"sources":["components/QKTView.tsx","utils/Message.tsx","components/QKTMainPage.tsx","components/App.tsx","scripts/serviceWorker.ts","index.tsx"],"names":["Stage","Message","Toaster","create","position","Position","BOTTOM","usePortal","canEscapeKeyClear","process","REACT_APP_QKT_HOST","REACT_APP_QKT_PORT","ENDPOINT","TILE_COLOR","blue","QKTView","props","componentDidMount","componentWillUnmount","doneSolving","setState","stage","Finished","buildGrid","grid","classes","Grid","container","className","root","item","xs","map","row","r","key","spacing","value","c","Paper","paper","style","backgroundColor","Typography","validateAlphaText","text","notValid","valid","alpha","trim","arr","split","every","x","Number","isInteger","filter","parseInt","length","some","sendRequest","a","options","url","headers","origin","window","location","useQuerystring","qs","json","response","rp","show","timeout","message","icon","intent","Intent","DANGER","SUCCESS","numSolutions","status","T","onSubmit","alphaText","state","Solving","onChange","event","target","validAlphaText","render","submitButton","content","minimal","PRIMARY","disabled","onClick","helperText","label","labelFor","labelInfo","placeholder","leftIcon","rightElement","slice","reverse","stripes","React","Component","withStyles","theme","createStyles","flexGrow","height","width","justifyContent","display","flexDirection","dotenv","config","QKTMainPage","App","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a755186.chunk.js","sourcesContent":["import React from 'react';\nimport rp from 'request-promise';\nimport {\n  ProgressBar, InputGroup, Button, Intent, FormGroup, Tooltip, H5,\n} from '@blueprintjs/core';\nimport { withStyles, createStyles } from '@material-ui/styles';\nimport { Theme, WithStyles, Paper, Grid, Typography } from '@material-ui/core';\nimport blue from '@material-ui/core/colors/blue';\n\nimport Message, { TIMEOUT } from 'utils/Message';\nimport 'styles/QKTView.css';\n\n\nconst { REACT_APP_QKT_HOST = 'localhost', REACT_APP_QKT_PORT = 5000 } = process.env;\n\nconst inDev = !process.env.NODE_ENV || process.env.NODE_ENV === 'development';\nconst CORS = `https://cors-anywhere.herokuapp.com/`;\nconst ENDPOINT = `${inDev ? '' : CORS}http://${REACT_APP_QKT_HOST}:${REACT_APP_QKT_PORT}`;\nconst TILE_COLOR = blue[200];\n\nconst styles = (theme: Theme) => createStyles({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    height: 50,\n    width: 50,\n    justifyContent: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n});\n\nenum Stage {\n  Solving,\n  Finished,\n}\n\ninterface AlphaValidation {\n  valid: boolean;\n  alpha: number[] | null;\n}\n\ninterface Props extends WithStyles<typeof styles> { }\n\ninterface State {\n  stage: Stage;\n  alpha: number[] | null;\n  T: number[][] | null;\n  status: string | null;\n  numSolutions: number | null;\n  validAlphaText: boolean;\n  alphaText: string;\n}\n\n/**\n * There a 3 stages:\n *   1. Inform the user what they need to do.\n *   2. Retrieval and display of QKTs.\n *   3. Show info after done.\n */\n\nclass QKTView extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      stage: Stage.Finished,\n      alpha: null,\n      status: null,\n      numSolutions: null,\n      T: null,\n      validAlphaText: false,\n      alphaText: '',\n    };\n  }\n\n  componentDidMount = () => { };\n\n  componentWillUnmount = () => { };\n\n  doneSolving = () => {\n    this.setState({\n      stage: Stage.Finished,\n    });\n  };\n\n  buildGrid = (grid: number[][]) => {\n    const { classes } = this.props;\n\n    return (\n      <Grid container className={classes.root}>\n        <Grid item xs='auto'>{grid.map((row, r) => (\n          <Grid container className={classes.root} key={r} spacing={0}>{row.map((value, c) => (\n            <Grid item key={`${r}.${c}`}>\n              <Paper\n                className={classes.paper}\n                style={{ backgroundColor: TILE_COLOR }}>\n                  <Typography>\n                    {value}\n                  </Typography>\n                </Paper>\n            </Grid>\n          ))}</Grid>\n        ))}</Grid>\n      </Grid>\n    );\n  };\n\n\n  /**\n   * The alpha text is valid if it:\n   *   - is non-empty,\n   *   - is a list of positive integers delimited by commas.\n   */\n  validateAlphaText = (text: string): AlphaValidation => {\n    const notValid = { valid: false, alpha: null };\n\n    if (text.trim() === '') return notValid;\n\n    const arr = text.split(/[ \\t,]+/);\n    if (!arr.every(x => Number.isInteger(+x))) return notValid;\n\n    const alpha = arr\n      .filter(x => x !== '')\n      .map(x => Number.parseInt(x));\n    if (alpha.length === 0) return notValid;\n    if (alpha.some(x => x < 0)) return notValid;\n\n    return { valid: true, alpha };\n  };\n\n  sendRequest = async (alpha: number[]) => {\n    const options: rp.OptionsWithUrl = {\n      url: `${ENDPOINT}/solve`,\n      headers: {\n        origin: window.location.origin,\n      },\n      useQuerystring: true,\n      qs: {\n        'alpha[]': alpha,\n      },\n      json: true,\n    };\n\n    let response = null;\n    try {\n      response = await rp(options);\n    } catch (e) {\n      Message.show({\n        timeout: TIMEOUT,\n        message: `Unable to solve: ${e}`,\n        icon: 'warning-sign',\n        intent: Intent.DANGER,\n      });\n      return this.setState({ stage: Stage.Finished });\n    }\n\n    Message.show({\n      timeout: TIMEOUT,\n      message: 'Successfully solved',\n      icon: 'tick',\n      intent: Intent.SUCCESS,\n    });\n    return this.setState({\n      stage: Stage.Finished,\n      numSolutions: response['num_solutions'],\n      status: response['status'],\n      T: response['sample_solution'],\n      alpha,\n    });\n  };\n\n  onSubmit = () => {\n    const { alphaText } = this.state;\n    const { valid, alpha } = this.validateAlphaText(alphaText);\n    if (!valid) return;\n\n    this.setState({ stage: Stage.Solving }, () => this.sendRequest(alpha!));\n  };\n\n  /**\n   * Called when the composition text is altered.\n   */\n  onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    const { valid } = this.validateAlphaText(value);\n\n    this.setState({\n      validAlphaText: valid,\n      alphaText: value,\n    });\n  };\n\n  render = () => {\n    const { stage, T, alpha, validAlphaText, status, numSolutions } = this.state;\n\n    const submitButton = (\n      <Tooltip content='Find quasi-key tableaux'>\n        <Button\n          minimal\n          icon='arrow-right'\n          intent={Intent.PRIMARY}\n          disabled={!validAlphaText}\n          onClick={this.onSubmit}\n        />\n      </Tooltip>\n    );\n\n    return (\n      <div>\n        <FormGroup\n          helperText=''\n          label='composition'\n          labelFor='text-input'\n          labelInfo='(weak)'\n        >\n          <InputGroup\n            placeholder={'\\u03b1'}\n            onChange={this.onChange}\n            intent={validAlphaText ? Intent.SUCCESS : Intent.DANGER}\n            leftIcon='dot'\n            rightElement={submitButton}\n          />\n        </FormGroup>\n        {T && this.buildGrid(T.slice().reverse())}\n        {alpha &&\n          <div>\n            <H5>Status: {status}</H5>\n            <H5>Number of solutions: {numSolutions}</H5>\n          </div>\n        }\n        {stage === Stage.Solving &&\n          <ProgressBar\n            className='sb-footer'\n            value={1}\n            stripes\n          />\n        }\n      </div>\n    );\n  };\n}\n\nexport default withStyles(styles)(QKTView);","import { Position, Toaster } from '@blueprintjs/core';\n\n\nexport const TIMEOUT = 2000;\n\nconst Message = Toaster.create({\n  position: Position.BOTTOM,\n  usePortal: true,\n  canEscapeKeyClear: true,\n});\n\nexport default Message;","import React from 'react';\nimport dotenv from 'dotenv';\n\nimport QKTView from 'components/QKTView';\n\n\ndotenv.config();\n\nconst QKTMainPage = () => (\n  <QKTView />\n);\n\nexport default QKTMainPage;","import React from 'react';\n\nimport '@blueprintjs/core/lib/css/blueprint.css';\n\nimport QKTMainPage from 'components/QKTMainPage';\n\nimport 'styles/App.css';\n\n\nconst App = () => (\n  <div\n    className={`App`}\n    style={{ width: '100%', height: '100%' }}\n  >\n    <QKTMainPage />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport dotenv from 'dotenv';\n\nimport App from 'components/App';\nimport * as serviceWorker from 'scripts/serviceWorker';\n\nimport 'styles/index.css';\n\n\ndotenv.config();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}